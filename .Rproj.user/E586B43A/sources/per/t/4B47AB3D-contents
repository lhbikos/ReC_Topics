
# Ready_Set_R {#Ready}

[Screencasted Lecture Link](https://spu.hosted.panopto.com/Panopto/Pages/Viewer.aspx?id=d080e0bb-e52e-4f38-9965-aa67010b3567 ) 
 
```{r  include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(comment = NA) #keeps out the hashtags in the knits
```

```{r include=FALSE}
options(scipen=999)#eliminates scientific notation
```

With the goal of creating a common, system-wide approach to using the platorm, this lesson is primarily created for CPY and I/O doctoral students who are entering the "stats sequence."I hope it will also be useful for others (including faculty) who are also making the transition to R. 
 
## Navigating this Lesson

There is about 45 minutes of lecture.  

### Learning Objectives

Learning objectives from this lecture include the following:

* Downloading/installing R's parts and pieces.
* Using R-Markdown as the interface for running R analyses and saving the script.
* Recognizing and adopting best practices for "R hygiene."
* Identifying effective strategies for troubleshooting R hiccups.

##  downloading and installing R

### So many paRts and pieces

Before we download, it may be helpful to understand some of R's many parts and pieces.

The base software is free and is available [here](https://www.r-project.org/)  

Because R is already on my machine (and because the instructions are sufficient), I will not walk through the demo, but I will point out a few things.

* The "cran" (I think "cranium") is the *Comprehensive R Archive Network.*  In order for R to run on your computer, you have to choose a location -- and it should be geographically "close to you." 
  + Follow the instructions for your operating system (Mac, Windows, Linux)
  + You will see the results of this download on your desktop (or elsewhere if you chose to not have it appear there) but you won't ever use R through this platform.
* [R Studio](https://www.rstudio.com/products/RStudio/) is the way in which we operate R.  It's a separate download. Choose the free, desktop, option that is appropriate for your operating system:   
* *R Markdown* is the way that many analysts write *script*, conduct analyses, and even write up results.  These are saved as .rmd files.
  + In R Studio, open an R Markdown document through File/New File/R Markdown
  + Specify the details of your document (title, author, desired ouput)
  + In a separate step, SAVE this document (File/Save] into a NEW FILE FOLDER that will contain anything else you need for your project (e.g., the data).
  + *Packages* are at the heart of working in R.  Installing and activating packages require writing script.
  
**Note** If you have an enterprise-owned machine (e.g,. in my specific context, if you are a faculty/staff or have a lab with an SPU-issued laptops) there are complications caused by how documents are stored. You will likely need to consult with your computer and technology support office.
  
### oRienting to R Studio (focusing only on the things we will be using first and most often)

* Upper right window
  + Environment:  lists the *objects* that are available to you (e.g., dataframes)
* Lower right window
  + Files:  Mimics your computer's environment.  Make it a practice to (a) organize your work in small folders and (b) navigating to that small folder that is holding your project when you are working on it.
  + Packages:  Lists the packages that have been installed.  If you navigate to it, you can see if it is "on."  You can also access information about the package (e.g., available functions, examples of script used with the package) in this menu.  This information actually opens in the Help window.
  + Viewer and Plots are helpful, later, when we can simultaneously look at our output and still work on our script.
* Primary window
  + R Studio runs in the background.  Very occasionally, I can find useful troubleshooting information here.
  + More commonly, I open my R Markdown document so that it takes the whole screen and I work directly, right here.
  
## best pRactices

### Setting up the file

* Create a project file folder.
* Put the data file in it.
* Open an R Markdown file.
* Save it in the same file folder.

### Script in chunks and everything else in the "inline text" sections

The only thing in the chunks should be script for running R cide.  You can also hashtag-out script so it won't run.

You can put almost anything you want in the "inline text with simple formatting."  Syntax for simple formatting in the text areas (e.g,. using italics, making headings, bold, etc.) is found here:  https://rmarkdown.rstudio.com/authoring_basics.html

"Chunks" start and end with with those three little tic marks and will show up in a shaded box.  Chunks have three symbols in their upper right.  Those controls will DISAPPEAR (if there are "```" )and your script wont run) if those tic marks are missing or showing up in the wrong place.

The easiest way to insert a chunk is to use the INSERT/R command at the top of this editor box.  You can also insert a chunk with the keyboard shortcut:  CTRL/ALT/i

### Managing packages

Note that I have hashtags in front my "install.packages" commands.  This is because I have already installed them.  

* You can run the script by temporarily removing the hashtag and running each command individually by placing your cursor at the end of the line of code and entering CNTRL/ENTER as a keyboard shortcut.  
* You can run the entire chunk by selecting the green arrow in the upper right of the chunk.
* You can run all the script prior to any chunk by clicking the middle symbol (grey down arrow)

ONCE A PACKAGE HAS BEEN INSTALLED, replace the hashtag.  It makes a mess to continue to re-run this code for installing packages (after they have already been installed).  

To make a package operable, you need to open it through the library.  This process must be repeated EACH TIME YOU RESTART R.

```{r message=FALSE, warning=FALSE}
#install.packages ("foreign")
#install.packages ("psych")
library (psych)
```

It takes awhile to learn which package is used for which task. A complete analysis (e.g., preliminary statistics, primary statistics, creating tables and figures) will require a number of packages. Many researchers like to list them all at in a complete section near the top of an .rmd file. In my lessons, I will include an "install-if-needed" section at the top that (hopefully) includes all the packages we use. My personal practice is to open the package (using the "library(package)" command) as I need it.  For me this serves two purposes:

* It helps me remember (and continue to learn) which package is used for which task, and
* (Possibly) helps prevent packages who share function names to not get confused with each other.
  - Another best practice for avoiding this problem is to name the package with two colons in front of the function (psych::describe)

Below is an example of the script that will appear near the beginning of each lesson. When the hashtags are removed, it checks to see if these packages are available to the user.

```{r }
#will install the package if not already installed
#if(!require(foreign)){install.packages("foreign")} #makes it possible to import data from packages, especially SPSS
#if(!require(psych)){install.packages("psych")} #psych package is useful for a variety of things we do
```

### Upload the data 

When conducted properly, the data will appear as an object in the global environment.  

In the context of this OER, I will be simulating data right in each lesson for use in the lesson. This makes the web-based platform more *portable.* This means that when working the problems in the chapter we do not (a) write the data to a file and (b) import data from files. Because these are essential skills, I will demonstrate this process here -- starting with simulating data.

At this point, simulating data is beyond the learning goals I have established for the chapter.  I do need to include the code so that we get some data. The data I am simulating is used in the [one-way ANOVA lesson](#oneway). The data is from the Tran and Lee [-@tran_you_2014] random clinical trial. 

In this simulation, I am simply creating an ID number, a condition (High, Low, Control), and a scoree on the dependent variable, "Accurate." More information about this study is included in the [one-way ANOVA chapter](#oneway). 

```{r }
set.seed(2021) #sets a random seed so that we get the same results each time
Accurate <- c(rnorm(30, mean=1.18, sd=0.80), rnorm(30, mean=1.83, sd = 0.58), rnorm(30, mean = 1.76, sd = 0.56))#sample size, M and SD for each group
Accurate[Accurate>3]<-3 #set upper bound for DV
Accurate[Accurate<0]<-0 #set lower bound for DV
ID<-factor(seq(1,90)) #IDs for participants
COND<-c(rep("High", 30), rep("Low", 30), rep("Control", 30)) #name factors and identify how many in each group; should be in same order as first row of script
Acc_sim30 <-data.frame(ID, COND, Accurate) #groups the 3 variables into a single df:  ID#, DV, condition
```

At this point, this data lives only in this .rmd file after the above code is run. Although there are numerous ways to export and import data, I have a preference for two.  

#### To and from .csv files

The first is to write the data to a .csv file. In your computer's environment (outside of R), these files are easily manipulated in Excel. I think of them as being "Excel lite" because although Excel can operate them, they lack some of the more advanced features of an Excel spreadsheet.

In the code below, I identify the R object "Acc_sim30" and give it a filename, "to_CSV.csv".  This filename must have the .csv extension.  I also indicate that it should preserve the column names (but ignore row names; since we don't have row names).

This file will save in the same folder as wherever you are using this .rmd file.

```{r}
#to write it to an outfile as a .csv
write.table(Acc_sim30, file="to_CSV.csv", sep=",", col.names=TRUE, row.names=FALSE)
```

Importing this object back into the R environment can be accomplished with some simple code. For the sake of demonstration, 

```{r}
#to save the df as an .csv (think "Excel lite") file on your computer; it should save in the same file as the .rmd file you are working with
from_CSV <- read.csv ("to_CSV.csv", header = TRUE)
```

The advantage of working with .csv files is that it is then easy to inspect and manipulate them without R.  The disadvantage of .csv files is that each time they are imported they lose any formatting you may have meticulously assigned to them. 


#### To and from .rds files

While it is easy enough to rerun the code (or copy it from data prep .rmd and paste it into an .rmd you are using for advanced analysis), there is an easier way!  This is to save the data as an R object.  This preserves all the characteristics of the data.

```{r}
#to save the df as an .rds file on your computer; it should save in the same file as the .rmd file you are working with
saveRDS(Acc_sim30, "to_Robject.rds")
```

This file will save to your computer (and you can send it to colleagues). However, it is not easy to "just open it" in Excel. To open an .rds file and use it (whether you created it or it is sent to you by a colleague), use the following code:

```{r}
from_rds <- readRDS("to_Robject.rds")
```

#### From SPSS files

Your data may come to you in a variety of ways. One of the most common is SPSS. The *foreign* package is popular for importing SPSS data.  Below is code which would import an SPSS file *if I had created one*.  You'll see that this script is hashtagged out because I do not have an SPSS file.  

```{r}
#opening an SPSS file requires the foreign package which I opened earlier
#from_SPSS <- foreign::read.spss ("SPSSdata.sav", use.value.labels = TRUE, to.data.frame = TRUE)
```

## quick demonstRation

Let's run some simple descriptives. In the script below, I am using the *psych* package. Descriptive statistics will appear for all the data in the dataframe and the output will be rounded to three spaces.

```{r}
library(psych)
round(psych::describe(Acc_sim30),3)
```
Because "ID" is the case ID and COND is the factor (high, low, control), the only variable for which this data is sensible is "Accurate."  None-the-less, this provides an example of how to apply a package's function to a dataset.  As we progress through the text we will learn how to manage the data so that we get the specific output we are seeking.

## the knitted file
One of the coolest things about R Markdown is its capacity to *knit* to HTML, PPT, or WORD.  

* In this OER, I am writing the lessons in R markdown (.rmd files), with the package *bookdown* as a helper, and knitting the files to the .html format. In prior years, I knitted these documents to .doc formats.  There are numerous possibilities!
* The package *papaja* is designed to prepare APA manuscripts where the writing, statistics, and references are all accomplished in a single file. This process contributes to replicability and reproducibility.

## tRoubleshooting in R maRkdown

* In a given set of operations, you must run/execute each piece of code in order: every, single, time. That is, all the packages have to be in your library and activated.
  + If you open an .rmd file, you cannot just scroll down to make a boxplot.  You need to run any *prerequisite* script (like loading files, putting the data in the global environment, etc.)
  + Lost?  clear your global environment (broom icon in the upper right) and start over. Fresh starts are good.
* Your .rmd file and your data need to be stored in the same file folder.  These should be separate for separate projects, no matter how small.
* Type any warnings you get into a search engine.  Odds are, you'll get some decent hints in a manner of seconds.  Especially at first, these are common errors:
  + The package isn't loaded
  + The .rmd file has been saved yet, or isn't saved in the same folder as the data
  + Errors of punctuation or spelling
* Restart R (it's quick -- not like restarting your computer)

## just *why* are we tRansitioning to R?

* It (or at least it appears to be) is the futuRe.
* SPSS site (and individual) license are increasingly expensive and limited (e.g,. we need Mplus, AMOS, HLM, or R). As package development for R is exploding, we have tools to "do just about anything."
* Most graduate psychology programs are scientist/practitionerin nature and include training in "high end" statistics.  Yet, many of your employing organizations will not have SPSS.  R is a free, universally accessible program, that our graduates can use anywhere.

## stRategies for success

* Engage with R, but don't let it overwhelm you.
  + The *mechanical is also the conceptual*. Especially while it's *simpler*, do try to retype the script into your own .rmd file and run it. Track down the errors you are making and fix them.
  + If this stresses you out, move to simply copying the code into the .rmd file and running it.  If you continue to have errors, you may have violated one of the best practices above (ask, "Is the package activated?" "Are the data and .rmd files in the same place?" "Is all the prerequisite script run?").
  + Still overwhelmed?  Keep moving forward by (retrieving the original.rmd file from the GitHub repository) opening a copy of the .rmd file and just "run it along" with the lecture. Spend your mental power trying to understand what each piece does so you can translate it for any homework assignments. My suggestions for practice aspire to be parallel to the lecture with no sneaky trix.
* Copy script that works elsewhere and replace it with your datafile, variables, etc.  
* The leaRning curve is steep, but not impossible.  Gladwell [-@gladwell_outliers_2008] reminds us that it takes about 10,000 hours to get GREAT at something (2,000 to get reasonably competent). Practice. Practice. Practice.
* Updates to R, R Studio, and the packages are NECESSARY, but can also be problematic.  It could very well be that updates cause programs/script to fail (e.g., "X has been deprecated for version X.XX").  Moreover, this very well could have happened between our distribution of the lecture and your attempt to use it days later. My practice is to update R, R Studio, and my packages about two weeks prior to the start of each academic term.
* Embrace your downward dog.  Also, walk away, go for a bicycle ride, then come back.
  

## Resources for getting staRted

R for Data Science:  https://r4ds.had.co.nz/

R Cookbook:  http://shop.oreilly.com/product/9780596809164.do

R Markdown homepage with tutorials:  https://rmarkdown.rstudio.com/index.html

R has cheatsheets for everything, here's the one for R Markdown:  https://www.rstudio.com/wp-content/uploads/2015/02/rmarkdown-cheatsheet.pdf 

R Markdown Reference guide:  https://www.rstudio.com/wp-content/uploads/2015/03/rmarkdown-reference.pdf

Using R Markdown for writing reproducible scientific papers:  https://libscie.github.io/rmarkdown-workshop/handout.html 

Script for all of Field's text:  https://studysites.uk.sagepub.com/dsur/study/scriptfi.htm

LaTeX equation editor:  https://www.codecogs.com/latex/eqneditor.php


```{r include=FALSE}
sessionInfo()
```


